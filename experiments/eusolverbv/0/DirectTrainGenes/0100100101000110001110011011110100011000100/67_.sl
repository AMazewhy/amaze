
(set-logic BV)

(define-fun shr1 ((x (BitVec 64))) (BitVec 64) (bvlshr x #x0000000000000001))
(define-fun shr4 ((x (BitVec 64))) (BitVec 64) (bvlshr x #x0000000000000004))
(define-fun shr16 ((x (BitVec 64))) (BitVec 64) (bvlshr x #x0000000000000010))
(define-fun shl1 ((x (BitVec 64))) (BitVec 64) (bvshl x #x0000000000000001))
(define-fun if0 ((x (BitVec 64)) (y (BitVec 64)) (z (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000001) y z))
(define-fun func23  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) (D (BitVec 64)) ) (BitVec 64) (bvand (bvlshr (bvlshr C  D ) B ) A ))
(define-fun func24  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) ) (BitVec 64) (bvand (bvlshr B  C ) A ))
(define-fun func25  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvand (bvlshr B  #x0000000000000001 ) A ))
(define-fun func26  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvand (bvlshr B  #x0000000000000010 ) A ))
(define-fun func27  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvand (bvlshr B  #x0000000000000004 ) A ))
(define-fun func28  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvand (bvlshr A  B ) #x0000000000000001 ))
(define-fun func29  ((A (BitVec 64)) ) (BitVec 64) (bvand A  #x0000000000000001 ))
(define-fun func30  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) (D (BitVec 64)) ) (BitVec 64) (bvlshr (bvlshr (bvlshr C  D ) B ) A ))
(define-fun func31  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) ) (BitVec 64) (bvlshr (bvlshr (bvlshr B  C ) A ) #x0000000000000004 ))
(define-fun func32  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) ) (BitVec 64) (bvlshr (bvlshr (bvlshr C  #x0000000000000010 ) B ) A ))
(define-fun func33  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) ) (BitVec 64) (bvlshr (bvlshr (bvlshr B  C ) #x0000000000000004 ) A ))
(define-fun func34  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) ) (BitVec 64) (bvlshr (bvlshr B  C ) A ))
(define-fun func35  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvlshr (bvlshr B  #x0000000000000010 ) A ))
(define-fun func36  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvlshr (bvlshr B  #x0000000000000004 ) A ))
(define-fun func37  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvlshr (bvlshr B  #x0000000000000001 ) A ))
(define-fun func38  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvlshr (bvlshr A  B ) #x0000000000000001 ))
(define-fun func39  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvlshr (bvlshr A  B ) #x0000000000000004 ))
(define-fun func40  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvlshr A  B ))
(define-fun func41  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) ) (BitVec 64) (bvlshr (bvshl B  C ) A ))
(define-fun func42  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvlshr (bvshl B  #x0000000000000001 ) A ))
(define-fun func43  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) ) (BitVec 64) (bvlshr (bvadd B  C ) A ))
(define-fun func44  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvlshr (bvnot B ) A ))
(define-fun func45  ((A (BitVec 64)) ) (BitVec 64) (bvlshr (bvnot A ) #x0000000000000010 ))
(define-fun func46  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) ) (BitVec 64) (bvor (bvlshr B  C ) A ))
(define-fun func47  ((A (BitVec 64)) ) (BitVec 64) (bvor A  #x0000000000000001 ))
(define-fun func48  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) ) (BitVec 64) (bvshl (bvlshr B  C ) A ))
(define-fun func49  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvshl (bvlshr B  #x0000000000000001 ) A ))
(define-fun func50  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvshl (bvlshr A  B ) #x0000000000000001 ))
(define-fun func52  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) ) (BitVec 64) (bvadd (bvlshr B  C ) A ))
(define-fun func53  ((A (BitVec 64)) ) (BitVec 64) (bvadd A  #x0000000000000001 ))
(define-fun func54  ((A (BitVec 64)) (B (BitVec 64)) (C (BitVec 64)) ) (BitVec 64) (bvadd (bvshl B  C ) A ))
(define-fun func55  ((A (BitVec 64)) (B (BitVec 64)) ) (BitVec 64) (bvadd (bvshl B  #x0000000000000001 ) A ))
(define-fun func56  ((A (BitVec 64)) ) (BitVec 64) (bvnot (bvshl A  #x0000000000000001 )))
(synth-fun f ( (x (BitVec 64))) (BitVec 64)
(
(Start (BitVec 64) (
   #x0000000000000000
   #x0000000000000001
   x
   (func24 Start Start Start)
   (func27 Start Start)
   (func30 Start Start Start Start)
   (func32 Start Start Start)
   (func36 Start Start)
   (func37 Start Start)
   (func41 Start Start Start)
   (func42 Start Start)
   (func43 Start Start Start)
   (func46 Start Start Start)
   (func47 Start)
   (func49 Start Start)
   (func50 Start Start)
   (func52 Start Start Start)
   (func53 Start)
   (func55 Start Start)
   (bvnot Start)
   (shl1 Start)
   (shr16 Start)
   (bvand Start Start)
   (bvor Start Start)
   (bvadd Start Start)
   (if0 Start Start Start)
))
))
(constraint (= (f #x7236fd323fd10280) #x8dc902cdc02efd7f))
(constraint (= (f #xd6f0505231b5dbac) #x290fafadce4a2453))
(constraint (= (f #xefc9e80e697b5cec) #x103617f19684a313))
(constraint (= (f #xacb5da70a8b675e0) #x534a258f57498a1f))
(constraint (= (f #x6228e36147fcefc0) #x9dd71c9eb803103f))
(constraint (= (f #x26179ec36430620d) #x4c2f3d86c860c41a))
(constraint (= (f #xf96b331b25bae619) #xf2d666364b75cc32))
(constraint (= (f #x71be3c1e5175b951) #xe37c783ca2eb72a2))
(constraint (= (f #x35093bb72738130d) #x6a12776e4e70261a))
(constraint (= (f #x5ecc1ced799d9b49) #xbd9839daf33b3692))
(constraint (= (f #xabe3b09c5eff712e) #x541c4f63a1008ed1))
(constraint (= (f #xc0df2757fe7190da) #x3f20d8a8018e6f25))
(constraint (= (f #x12230347b45e66be) #xeddcfcb84ba19941))
(constraint (= (f #xadb6dca00df63ca2) #x5249235ff209c35d))
(constraint (= (f #x8847539637922d56) #x77b8ac69c86dd2a9))
(constraint (= (f #x1af162b4158d9784) #xe50e9d4bea72687b))
(constraint (= (f #xc2167b47246af2e8) #x3de984b8db950d17))
(constraint (= (f #x2e62602a606b8ee4) #xd19d9fd59f94711b))
(constraint (= (f #xc1483865348b1d5c) #x3eb7c79acb74e2a3))
(constraint (= (f #x2ff464b5ff497a44) #xd00b9b4a00b685bb))
(constraint (= (f #x14dc7b66b41eedbf) #x29b8f6cd683ddb7e))
(constraint (= (f #x4935f10ebe9e20fb) #x926be21d7d3c41f6))
(constraint (= (f #x4818379c649108fb) #x90306f38c92211f6))
(constraint (= (f #xd592aaa6c07bfc23) #xab25554d80f7f846))
(constraint (= (f #x5e270177cf18693b) #xbc4e02ef9e30d276))
(constraint (= (f #x1f75967c9fceb381) #x1f75967c9fceb381))
(constraint (= (f #x44ecbd1794069489) #x44ecbd1794069489))
(constraint (= (f #x59c6f3b0a48eee25) #x59c6f3b0a48eee25))
(constraint (= (f #xaf8e26b062824a59) #xaf8e26b062824a59))
(constraint (= (f #x29f865225a67de65) #x29f865225a67de65))
(constraint (= (f #xac0ade5785018366) #x53f521a87afe7c99))
(constraint (= (f #x20a240f7f98f6172) #xdf5dbf0806709e8d))
(constraint (= (f #x4d49875f08cc3292) #xb2b678a0f733cd6d))
(constraint (= (f #x5dd78883c347bc8e) #xa228777c3cb84371))
(constraint (= (f #xb026cdeba2a7bbe2) #x4fd932145d58441d))
(constraint (= (f #x388551c28ae0245b) #x388551c28ae0245b))
(constraint (= (f #xbc42cfbff7627d6b) #xbc42cfbff7627d6b))
(constraint (= (f #xd67c53c673634e27) #xd67c53c673634e27))
(constraint (= (f #xebf97b64ed641803) #xebf97b64ed641803))
(constraint (= (f #x017430768e67d24f) #x017430768e67d24f))
(constraint (= (f #xffffffffffffffff) #xfffffffffffffffe))
(constraint (= (f #x1be88589ba201842) #xe4177a7645dfe7bd))
(constraint (= (f #x49ea2ae53e599623) #x93d455ca7cb32c46))
(constraint (= (f #xea82cc5e6104247d) #xea82cc5e6104247d))
(constraint (= (f #x75820d31bed79b87) #xeb041a637daf370e))
(constraint (= (f #xe682665199ee31a8) #x197d99ae6611ce57))
(constraint (= (f #x9d8d9c6595ee5ded) #x9d8d9c6595ee5ded))
(constraint (= (f #xad1b863e6b5351d4) #x52e479c194acae2b))
(constraint (= (f #xa7465c5c466de212) #x58b9a3a3b9921ded))
(constraint (= (f #xc287ecb0e2e8eb85) #xc287ecb0e2e8eb85))
(constraint (= (f #xac30404490729c8c) #x53cfbfbb6f8d6373))
(constraint (= (f #x51ead8d97c522039) #xa3d5b1b2f8a44072))
(constraint (= (f #xdd949f185b6bd961) #xdd949f185b6bd961))
(constraint (= (f #xeca17e099d1d5b5d) #xd942fc133a3ab6ba))
(constraint (= (f #x073c03534c092263) #x073c03534c092263))
(constraint (= (f #xffffffffffffffff) #xfffffffffffffffe))
(constraint (= (f #x9aa7e45f6673b2ae) #x65581ba0998c4d51))
(check-synth)
