(set-logic SLIA)
(define-fun func0  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func1  ((A String) (B String) (C String) (D String) ) String (str.replace A  B  (str.++ C  D )))
(define-fun func2  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func3  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func4  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func5  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func6  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func7  ((A String) (B Int) ) String (str.substr A  (+ 3  5 ) B ))
(define-fun func8  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 3  C ) B ))
(define-fun func9  ((A String) (B Int) (C Int) ) String (str.substr A  (+ C  5 ) B ))
(define-fun func10  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func11  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func12  ((A String) (B Int) ) String (str.substr A  3  B ))
(define-fun func13  ((A String) (B Int) (C Int) ) String (str.substr A  (- (str.len A ) C ) B ))
(define-fun func14  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (- (str.len D ) C ) B ))
(define-fun func15  ((A String) (B Int) (C String) ) String (str.substr A  (- (str.len C ) 3 ) B ))
(define-fun func16  ((A String) (B Int) (C Int) ) String (str.substr A  (- C  3 ) B ))
(define-fun func17  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (- C  D ) B ))
(define-fun func18  ((A String) (B Int) (C Int) ) String (str.substr A  (- B  C ) 3 ))
(define-fun func19  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func20  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  1 )))
(define-fun func21  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func22  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func23  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  1 )))
(define-fun func24  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func25  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func26  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func27  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func28  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func29  ((A String) (B String) (C String) (D String) (E Int) ) String (str.++ A  (str.++ B  (str.++ (str.at D  E ) C ))))
(define-fun func30  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func31  ((A String) (B String) (C String) (D String) (E String) ) String (str.++ A  (str.replace B  C  (str.++ D  E ))))
(define-fun func32  ((A String) (B String) (C String) (D Int) ) String (str.++ A  (str.++ (str.at C  D ) B )))
(define-fun func33  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func34  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func35  ((A String) (B Int) (C String) (D String) ) String (str.++ (str.at A  B ) (str.++ C  D )))
(define-fun func36  ((A String) (B Int) (C String) (D String) (E String) ) String (str.++ (str.at A  B ) (str.++ C  (str.++ D  E ))))
(define-fun func37  ((A String) ) String (str.at A  0 ))
(define-fun func39  ((A Int) ) Int (+ A  5 ))
(define-fun func40  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func41  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func42  ((A Int) ) Int (- A  3 ))
(synth-fun f ((name String)) String
( (Start String (ntString))
 (ntString String (
	name " " "+" "-" "." "(" ")" 
	(func0 ntString ntString ntString ntString ntString)
	(func1 ntString ntString ntString ntString)
	(func3 ntString ntString ntInt)
	(func4 ntString ntString)
	(func5 ntString ntString ntString ntInt)
	(func8 ntString ntInt ntInt)
	(func9 ntString ntInt ntInt)
	(func10 ntString ntInt ntInt ntInt)
	(func11 ntString ntInt ntInt)
	(func12 ntString ntInt)
	(func13 ntString ntInt ntInt)
	(func14 ntString ntInt ntInt ntString)
	(func15 ntString ntInt ntString)
	(func17 ntString ntInt ntInt ntInt)
	(func20 ntString ntInt ntString)
	(func21 ntString ntInt ntString)
	(func22 ntString ntInt ntString ntString ntInt)
	(func23 ntString ntInt ntString ntString)
	(func28 ntString ntString ntString)
	(func29 ntString ntString ntString ntString ntInt)
	(func30 ntString ntString ntString ntString)
	(func31 ntString ntString ntString ntString ntString)
	(func32 ntString ntString ntString ntInt)
	(func33 ntString ntString ntInt)
	(func36 ntString ntInt ntString ntString ntString)
	(ite ntBool ntString ntString)
	(str.substr ntString ntInt ntInt)
))
 (ntInt Int (
	0 1 2 3 4 5 
	(func26 ntString ntString)
	(func27 ntString ntString)
	(func39 ntInt)
	(func40 ntInt ntString)
	(func41 ntString)
	(str.len ntString)
	(str.to.int ntString)
	(ite ntBool ntInt ntInt)
))
 (ntBool Bool (
	true false
	(= ntInt ntInt)
	(str.prefixof ntString ntString)
	(str.suffixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "+106 769-858-438") "+106 (769) 858-438"))
(constraint (= (f "+83 973-757-831") "+83 (973) 757-831"))
(constraint (= (f "+62 647-787-775") "+62 (647) 787-775"))
(constraint (= (f "+172 027-507-632") "+172 (027) 507-632"))
(constraint (= (f "+72 001-050-856") "+72 (001) 050-856"))
(constraint (= (f "+95 310-537-401") "+95 (310) 537-401"))
(constraint (= (f "+6 775-969-238") "+6 (775) 969-238"))
(check-synth)
