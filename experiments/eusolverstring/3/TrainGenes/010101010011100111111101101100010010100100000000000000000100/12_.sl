(set-logic SLIA)
(define-fun func0  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func1  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func2  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func3  ((A String) ) String (str.substr A  0  3 ))
(define-fun func4  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func5  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func6  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func7  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func8  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func9  ((A String) (B Int) ) String (str.substr A  (+ 3  5 ) B ))
(define-fun func10  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 3  C ) B ))
(define-fun func11  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func12  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func13  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func14  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func15  ((A String) (B Int) (C Int) ) String (str.substr A  (+ C  5 ) B ))
(define-fun func16  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func17  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func18  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func19  ((A String) ) String (str.substr A  4  3 ))
(define-fun func20  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func21  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func22  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func23  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func24  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func25  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  1 )))
(define-fun func26  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func27  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func28  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func29  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func30  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func32  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func33  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func34  ((A Int) ) Int (+ A  5 ))
(define-fun func35  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func36  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func37  ((A String) (B String) (C String) (D String) (E Int) ) String (str.++ A  (str.++ B  (str.++ (str.at D  E ) C ))))
(define-fun func38  ((A String) (B String) (C String) (D Int) ) String (str.++ A  (str.++ (str.at C  D ) B )))
(define-fun func39  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func40  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func41  ((A String) (B Int) (C String) (D String) (E String) ) String (str.++ (str.at A  B ) (str.++ C  (str.++ D  E ))))
(define-fun func42  ((A String) (B Int) (C String) (D String) ) String (str.++ (str.at A  B ) (str.++ C  D )))
(define-fun func43  ((A String) ) String (str.at A  0 ))
(define-fun func44  ((A Int) (B String) ) Int (- (str.len B ) A ))
(synth-fun f ((_arg_0 String)) String
( (Start String (ntString))
 (ntString String (
	_arg_0 "" " " "Inc" "Company" "Corporation" "Enterprises" 
	(func1 ntString ntString ntInt)
	(func3 ntString)
	(func5 ntString ntInt ntString)
	(func7 ntString ntInt ntString ntString)
	(func10 ntString ntInt ntInt)
	(func11 ntString ntInt ntInt ntString ntInt)
	(func12 ntString ntInt ntInt ntString)
	(func15 ntString ntInt ntInt)
	(func16 ntString ntInt ntInt ntInt)
	(func17 ntString ntInt ntInt)
	(func18 ntString ntInt ntInt)
	(func19 ntString)
	(func20 ntString ntInt ntString ntInt)
	(func21 ntString ntInt ntString ntString ntInt)
	(func23 ntString ntInt)
	(func24 ntString ntInt ntInt ntString)
	(func26 ntString ntInt ntString)
	(func35 ntString ntString ntString)
	(func39 ntString ntString ntInt)
	(func42 ntString ntInt ntString ntString)
	(str.++ ntString ntString)
	(str.replace ntString ntString ntString)
	(str.at ntString ntInt)
	(int.to.str ntInt)
	(ite ntBool ntString ntString)
	(str.substr ntString ntInt ntInt)
))
 (ntInt Int (
	1 0 -1 
	(func27 ntString ntString)
	(func30 ntString ntString)
	(+ ntInt ntInt)
	(- ntInt ntInt)
	(str.len ntString)
	(str.to.int ntString)
	(ite ntBool ntInt ntInt)
	(str.indexof ntString ntString ntInt)
))
 (ntBool Bool (
	true false
	(= ntInt ntInt)
	(str.suffixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "General Electric") "General Electric"))
(constraint (= (f "General Electric Inc") "General Electric"))
(constraint (= (f "General Electric Company") "General Electric"))
(constraint (= (f "Microsoft") "Microsoft"))
(constraint (= (f "Microsoft Corporation") "Microsoft"))
(constraint (= (f "Nintendo") "Nintendo"))
(constraint (= (f "Nintendo Enterprises") "Nintendo"))
(check-synth)
