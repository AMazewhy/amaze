(set-logic SLIA)
(define-fun func0  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func1  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func2  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func3  ((A String) ) String (str.substr A  0  3 ))
(define-fun func4  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func5  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func6  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func7  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func8  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func9  ((A String) (B Int) ) String (str.substr A  (+ 3  5 ) B ))
(define-fun func10  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 3  C ) B ))
(define-fun func11  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func12  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func13  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func14  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func15  ((A String) (B Int) (C Int) ) String (str.substr A  (+ C  5 ) B ))
(define-fun func16  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func17  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func18  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func19  ((A String) ) String (str.substr A  4  3 ))
(define-fun func20  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func21  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func22  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func23  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func24  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func25  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  1 )))
(define-fun func26  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func27  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func28  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func29  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func30  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func32  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func33  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func34  ((A Int) ) Int (+ A  5 ))
(define-fun func35  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func36  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func37  ((A String) (B String) (C String) (D String) (E Int) ) String (str.++ A  (str.++ B  (str.++ (str.at D  E ) C ))))
(define-fun func38  ((A String) (B String) (C String) (D Int) ) String (str.++ A  (str.++ (str.at C  D ) B )))
(define-fun func39  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func40  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func41  ((A String) (B Int) (C String) (D String) (E String) ) String (str.++ (str.at A  B ) (str.++ C  (str.++ D  E ))))
(define-fun func42  ((A String) (B Int) (C String) (D String) ) String (str.++ (str.at A  B ) (str.++ C  D )))
(define-fun func43  ((A String) ) String (str.at A  0 ))
(define-fun func44  ((A Int) (B String) ) Int (- (str.len B ) A ))
(synth-fun f ((firstname String) (lastname String)) String
( (Start String (ntString))
 (ntString String (
	firstname lastname " " 
	(func0 ntString ntInt)
	(func4 ntString ntInt ntString ntInt)
	(func5 ntString ntInt ntString)
	(func6 ntString ntInt ntString ntString ntInt)
	(func7 ntString ntInt ntString ntString)
	(func10 ntString ntInt ntInt)
	(func14 ntString ntInt ntInt ntString ntString)
	(func15 ntString ntInt ntInt)
	(func16 ntString ntInt ntInt ntInt)
	(func17 ntString ntInt ntInt)
	(func18 ntString ntInt ntInt)
	(func20 ntString ntInt ntString ntInt)
	(func24 ntString ntInt ntInt ntString)
	(func25 ntString ntInt ntString ntString)
	(func26 ntString ntInt ntString)
	(func35 ntString ntString ntString)
	(func36 ntString ntString ntString ntString)
	(func37 ntString ntString ntString ntString ntInt)
	(func39 ntString ntString ntInt)
	(func40 ntString ntString)
	(func43 ntString)
	(str.++ ntString ntString)
	(str.replace ntString ntString ntString)
	(str.at ntString ntInt)
	(int.to.str ntInt)
	(ite ntBool ntString ntString)
))
 (ntInt Int (
	0 1 2 
	(func28 ntString ntString)
	(func29 ntString ntString ntInt)
	(func30 ntString ntString)
	(func32 ntInt ntString ntString ntInt)
	(func34 ntInt)
	(func44 ntInt ntString)
	(+ ntInt ntInt)
	(str.len ntString)
	(str.to.int ntString)
	(ite ntBool ntInt ntInt)
))
 (ntBool Bool (
	true false
	(= ntInt ntInt)
	(str.prefixof ntString ntString)
	(str.suffixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "Launa" "Withers") "Launa Withers"))
(constraint (= (f "Lakenya" "Edison") "Lakenya Edison"))
(constraint (= (f "Brendan" "Hage") "Brendan Hage"))
(constraint (= (f "Bradford" "Lango") "Bradford Lango"))
(constraint (= (f "Rudolf" "Akiyama") "Rudolf Akiyama"))
(constraint (= (f "Lara" "Constable") "Lara Constable"))
(check-synth)
