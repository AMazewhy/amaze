(set-logic SLIA)
(define-fun func0  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func1  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func2  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func3  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  1 )))
(define-fun func4  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func5  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func6  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  1 )))
(define-fun func7  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func8  ((A String) ) String (str.substr A  0  3 ))
(define-fun func9  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func10  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func11  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func12  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func13  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func14  ((A String) (B Int) ) String (str.substr A  (+ 3  5 ) B ))
(define-fun func15  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 3  C ) B ))
(define-fun func16  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func17  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func18  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func19  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func20  ((A String) (B Int) (C Int) ) String (str.substr A  (+ C  5 ) B ))
(define-fun func21  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func22  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func23  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func24  ((A String) ) String (str.substr A  4  3 ))
(define-fun func25  ((A String) (B Int) ) String (str.substr A  3  B ))
(define-fun func26  ((A String) (B Int) (C Int) ) String (str.substr A  (- (str.len A ) C ) B ))
(define-fun func27  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (- (str.len D ) C ) B ))
(define-fun func28  ((A String) (B Int) (C String) ) String (str.substr A  (- (str.len C ) 3 ) B ))
(define-fun func29  ((A String) (B Int) (C Int) ) String (str.substr A  (- C  3 ) B ))
(define-fun func30  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (- C  D ) B ))
(define-fun func31  ((A String) (B Int) (C Int) ) String (str.substr A  (- B  C ) 3 ))
(define-fun func32  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func33  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  1 )))
(define-fun func34  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func35  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func36  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  1 )))
(define-fun func37  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func38  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func39  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func40  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func41  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func42  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func43  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func44  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func45  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func47  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func48  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func49  ((A Int) ) Int (+ A  5 ))
(define-fun func50  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func51  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func52  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func53  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func54  ((A String) (B Int) (C String) (D String) (E String) ) String (str.++ (str.at A  B ) (str.++ C  (str.++ D  E ))))
(define-fun func55  ((A String) (B Int) (C String) (D String) ) String (str.++ (str.at A  B ) (str.++ C  D )))
(define-fun func56  ((A String) ) String (str.at A  0 ))
(define-fun func57  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func58  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func59  ((A Int) ) Int (- A  3 ))
(synth-fun f ((_arg_0 String)) String
( (Start String (ntString))
 (ntString String (
	_arg_0 "" " " 
	(func0 ntString ntString ntString ntString ntString)
	(func2 ntString ntString ntInt)
	(func4 ntString ntString)
	(func7 ntString ntString ntString)
	(func9 ntString ntInt ntString ntInt)
	(func10 ntString ntInt ntString)
	(func12 ntString ntInt ntString ntString)
	(func16 ntString ntInt ntInt ntString ntInt)
	(func17 ntString ntInt ntInt ntString)
	(func18 ntString ntInt ntInt ntString ntString ntInt)
	(func19 ntString ntInt ntInt ntString ntString)
	(func20 ntString ntInt ntInt)
	(func21 ntString ntInt ntInt ntInt)
	(func22 ntString ntInt ntInt)
	(func23 ntString ntInt ntInt)
	(func27 ntString ntInt ntInt ntString)
	(func28 ntString ntInt ntString)
	(func30 ntString ntInt ntInt ntInt)
	(func32 ntString ntInt ntString ntInt)
	(func34 ntString ntInt ntString)
	(func36 ntString ntInt ntString ntString)
	(func39 ntString ntInt)
	(func41 ntString ntInt ntString)
	(func50 ntString ntString ntString)
	(func51 ntString ntString ntString ntString)
	(func53 ntString ntString)
	(func54 ntString ntInt ntString ntString ntString)
	(str.++ ntString ntString)
	(str.replace ntString ntString ntString)
	(int.to.str ntInt)
	(ite ntBool ntString ntString)
	(str.substr ntString ntInt ntInt)
))
 (ntInt Int (
	1 0 -1 1 2 3 4 5 6 7 8 9 0 
	(func42 ntString ntString)
	(func43 ntString ntString)
	(func44 ntString ntString ntInt)
	(func45 ntString ntString)
	(func47 ntInt ntString ntString ntInt)
	(func48 ntInt ntString ntString)
	(func49 ntInt)
	(func57 ntInt ntString)
	(func58 ntString)
	(str.len ntString)
	(str.to.int ntString)
	(ite ntBool ntInt ntInt)
	(str.indexof ntString ntString ntInt)
))
 (ntBool Bool (
	true false
	(= ntInt ntInt)
	(str.prefixof ntString ntString)
	(str.suffixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "34653 jim mcdonald") " jim mcdonald"))
(constraint (= (f "price is 500") " price is "))
(constraint (= (f "100 apples") " apples"))
(check-synth)
