(set-logic SLIA)
(define-fun func0  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func1  ((A String) (B String) (C String) (D String) ) String (str.replace A  B  (str.++ C  D )))
(define-fun func2  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func3  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func4  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  1 )))
(define-fun func5  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func6  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func7  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  1 )))
(define-fun func8  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func9  ((A String) (B Int) (C Int) ) String (str.substr A  0  (+ B  C )))
(define-fun func10  ((A String) ) String (str.substr A  0  3 ))
(define-fun func11  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func12  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func13  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func14  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func15  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func16  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func17  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func18  ((A String) ) String (str.substr A  4  3 ))
(define-fun func19  ((A String) (B Int) ) String (str.substr A  3  B ))
(define-fun func20  ((A String) (B Int) (C Int) ) String (str.substr A  (- (str.len A ) C ) B ))
(define-fun func21  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (- (str.len D ) C ) B ))
(define-fun func22  ((A String) (B Int) (C String) ) String (str.substr A  (- (str.len C ) 3 ) B ))
(define-fun func23  ((A String) (B Int) (C Int) ) String (str.substr A  (- C  3 ) B ))
(define-fun func24  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (- C  D ) B ))
(define-fun func25  ((A String) (B Int) (C Int) ) String (str.substr A  (- B  C ) 3 ))
(define-fun func26  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func27  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  1 )))
(define-fun func28  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func29  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func30  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  1 )))
(define-fun func31  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func32  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (+ C  D )))
(define-fun func33  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func34  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func35  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func36  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func37  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func38  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func39  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func40  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func41  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  1 )))
(define-fun func42  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func43  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func44  ((A String) (B String) (C String) (D String) (E String) ) String (str.++ A  (str.replace B  C  (str.++ D  E ))))
(define-fun func45  ((A String) (B String) ) String (str.++ A  B ))
(define-fun func46  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func47  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func48  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func49  ((A String) (B Int) (C String) (D String) (E String) ) String (str.++ (str.at A  B ) (str.++ C  (str.++ D  E ))))
(define-fun func50  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func51  ((A String) ) String (str.at A  0 ))
(define-fun func52  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func53  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func54  ((A Int) ) Int (- A  3 ))
(synth-fun f ((col1 String) (col2 String)) String
( (Start String (ntString))
 (ntString String (
	col1 col2 " " "," "USA" "PA" "CT" "CA" "MD" "NY" 
	(func1 ntString ntString ntString ntString)
	(func2 ntString ntInt)
	(func3 ntString ntString ntInt)
	(func4 ntString ntString)
	(func6 ntString ntString ntString ntInt)
	(func8 ntString ntString ntString)
	(func10 ntString)
	(func11 ntString ntInt ntString ntInt)
	(func12 ntString ntInt ntString ntString ntInt)
	(func14 ntString ntInt ntInt ntString ntInt)
	(func15 ntString ntInt ntInt ntString ntString ntInt)
	(func17 ntString ntInt ntInt)
	(func18 ntString)
	(func21 ntString ntInt ntInt ntString)
	(func22 ntString ntInt ntString)
	(func24 ntString ntInt ntInt ntInt)
	(func25 ntString ntInt ntInt)
	(func26 ntString ntInt ntString ntInt)
	(func29 ntString ntInt ntString ntString ntInt)
	(func30 ntString ntInt ntString ntString)
	(func32 ntString ntInt ntInt ntInt)
	(func33 ntString ntInt)
	(func34 ntString ntInt)
	(func35 ntString ntInt ntInt ntString)
	(func36 ntString ntInt ntString)
	(func43 ntString ntString ntString ntString)
	(func48 ntString ntString)
	(func50 ntString ntString ntString ntString)
	(func51 ntString)
	(str.at ntString ntInt)
	(int.to.str ntInt)
))
 (ntInt Int (
	0 1 2 
	(func38 ntString ntString)
	(func39 ntString ntString ntInt)
	(func41 ntInt ntString ntString)
	(func53 ntString)
	(func54 ntInt)
	(+ ntInt ntInt)
	(- ntInt ntInt)
))
 (ntBool Bool (
	true false
	(= ntInt ntInt)
	(str.contains ntString ntString)
))
))
(constraint (= (f "University of Pennsylvania" "Phialdelphia, PA, USA") "Phialdelphia, PA, USA"))
(constraint (= (f "UCLA" "Los Angeles, CA") "Los Angeles, CA, USA"))
(constraint (= (f "Cornell University" "Ithaca, New York, USA") "Ithaca, New York, USA"))
(constraint (= (f "Penn" "Philadelphia, PA, USA") "Philadelphia, PA, USA"))
(constraint (= (f "University of Maryland College Park" "College Park, MD") "College Park, MD, USA"))
(constraint (= (f "University of Michigan" "Ann Arbor, MI, USA") "Ann Arbor, MI, USA"))
(constraint (= (f "UC Berkeley" "Berkeley, CA") "Berkeley, CA, USA"))
(constraint (= (f "MIT" "Cambridge, MA") "Cambridge, MA, USA"))
(constraint (= (f "Rice University" "Houston, TX") "Houston, TX, USA"))
(constraint (= (f "Yale University" "New Haven, CT, USA") "New Haven, CT, USA"))
(constraint (= (f "Columbia University" "New York, NY, USA") "New York, NY, USA"))
(constraint (= (f "NYU" "New York, New York, USA") "New York, New York, USA"))
(constraint (= (f "UC Berkeley" "Berkeley, CA") "Berkeley, CA, USA"))
(constraint (= (f "UIUC" "Urbana, IL") "Urbana, IL, USA"))
(constraint (= (f "Temple University" "Philadelphia, PA") "Philadelphia, PA, USA"))
(constraint (= (f "Harvard University" "Cambridge, MA, USA") "Cambridge, MA, USA"))
(constraint (= (f "University of Connecticut" "Storrs, CT, USA") "Storrs, CT, USA"))
(constraint (= (f "Drexel University" "Philadelphia, PA") "Philadelphia, PA, USA"))
(constraint (= (f "New Haven University" "New Haven, CT, USA") "New Haven, CT, USA"))
(constraint (= (f "University of California, Santa Barbara" "Santa Barbara, CA, USA") "Santa Barbara, CA, USA"))
(check-synth)
