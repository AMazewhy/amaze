(set-logic SLIA)
(define-fun func0  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func1  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func2  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func3  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  1 )))
(define-fun func4  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func5  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func6  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  1 )))
(define-fun func7  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func8  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func9  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func10  ((A String) (B Int) ) String (str.substr A  (+ 3  5 ) B ))
(define-fun func11  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 3  C ) B ))
(define-fun func12  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func13  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func14  ((A String) (B Int) (C Int) ) String (str.substr A  (+ C  5 ) B ))
(define-fun func15  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func16  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func17  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func18  ((A String) (B Int) ) String (str.substr A  3  B ))
(define-fun func19  ((A String) (B Int) (C Int) ) String (str.substr A  (- (str.len A ) C ) B ))
(define-fun func20  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (- (str.len D ) C ) B ))
(define-fun func21  ((A String) (B Int) (C String) ) String (str.substr A  (- (str.len C ) 3 ) B ))
(define-fun func22  ((A String) (B Int) (C Int) ) String (str.substr A  (- C  3 ) B ))
(define-fun func23  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (- C  D ) B ))
(define-fun func24  ((A String) (B Int) (C Int) ) String (str.substr A  (- B  C ) 3 ))
(define-fun func25  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func26  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func27  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  1 )))
(define-fun func28  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func29  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func30  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  1 )))
(define-fun func31  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func32  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func33  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func34  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func35  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func37  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func38  ((A Int) ) Int (+ A  5 ))
(define-fun func39  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func40  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func41  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func42  ((A String) (B String) (C String) (D String) (E Int) ) String (str.++ A  (str.++ B  (str.++ (str.at D  E ) C ))))
(define-fun func43  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func44  ((A String) (B String) (C String) (D Int) ) String (str.++ A  (str.++ (str.at C  D ) B )))
(define-fun func45  ((A String) (B String) (C String) (D String) (E String) ) String (str.++ A  (str.replace B  C  (str.++ D  E ))))
(define-fun func46  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func47  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func48  ((A String) (B Int) (C String) (D String) (E String) ) String (str.++ (str.at A  B ) (str.++ C  (str.++ D  E ))))
(define-fun func49  ((A String) (B String) (C String) (D String) ) String (str.replace A  B  (str.++ C  D )))
(define-fun func50  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func51  ((A String) ) String (str.at A  0 ))
(define-fun func52  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func53  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func54  ((A Int) ) Int (- A  3 ))
(synth-fun f ((_arg_0 String)) String
( (Start String (ntString))
 (ntString String (
	_arg_0 "" " " "/" 
	(func2 ntString ntString)
	(func6 ntString ntString ntString)
	(func7 ntString ntInt ntString ntInt)
	(func9 ntString ntInt ntInt)
	(func10 ntString ntInt)
	(func11 ntString ntInt ntInt)
	(func12 ntString ntInt ntInt ntString ntInt)
	(func14 ntString ntInt ntInt)
	(func17 ntString ntInt ntInt)
	(func18 ntString ntInt)
	(func24 ntString ntInt ntInt)
	(func25 ntString ntInt ntString ntInt)
	(func26 ntString ntInt ntString)
	(func27 ntString ntInt ntString)
	(func29 ntString ntInt ntString ntString)
	(func32 ntString ntInt)
	(func51 ntString)
	(str.at ntString ntInt)
	(int.to.str ntInt)
))
 (ntInt Int (
	1 0 -1 
	(func35 ntString ntString ntInt)
	(func40 ntString ntString)
	(- ntInt ntInt)
	(ite ntBool ntInt ntInt)
))
 (ntBool Bool (
	true false
	(str.prefixof ntString ntString)
))
))
(constraint (= (f "01/15/2013") "01/2013"))
(constraint (= (f "03/07/2011") "03/2011"))
(constraint (= (f "05/09/2009") "05/2009"))
(check-synth)
