(set-logic SLIA)
(define-fun func0  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func1  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func2  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func3  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func4  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func5  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func6  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func7  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func8  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func9  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func10  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func11  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func12  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (- (str.indexof A  D  E ) C ) B ))
(define-fun func13  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (- (str.indexof D  E  F ) C ) B ))
(define-fun func14  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (- C  D ) B ))
(define-fun func15  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func16  ((A String) ) String (str.substr A  0  1 ))
(define-fun func17  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (+ C  D )))
(define-fun func18  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func19  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func20  ((A String) (B Int) ) String (str.substr A  B  1 ))
(define-fun func21  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (- C  D )))
(define-fun func22  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func23  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func24  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func25  ((A String) (B Int) ) String (str.substr A  -1  B ))
(define-fun func26  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (- (str.indexof C  D  E ) -1 ) B ))
(define-fun func27  ((A String) (B Int) (C Int) ) String (str.substr A  (- C  -1 ) B ))
(define-fun func28  ((A String) (B Int) (C Int) ) String (str.substr A  0  (+ B  C )))
(define-fun func29  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func30  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func31  ((A Int) ) Int (+ -1  A ))
(define-fun func32  ((A Int) ) Int (+ 1  A ))
(define-fun func33  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func34  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func35  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func36  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  1 )))
(define-fun func37  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func38  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func39  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func40  ((A Int) (B String) (C String) (D Int) ) Int (- (str.indexof B  C  D ) A ))
(define-fun func41  ((A String) (B String) (C Int) ) Int (- (str.indexof A  B  C ) -1 ))
(define-fun func42  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func43  ((A Int) ) Int (- A  -1 ))
(define-fun func44  ((A String) (B String) (C Int) (D Int) ) String (str.++ (str.substr B  C  D ) A ))
(define-fun func45  ((A String) (B String) (C Int) ) String (str.++ (str.substr B  0  C ) A ))
(define-fun func46  ((A String) (B String) ) String (str.++ (str.substr B  0  1 ) A ))
(define-fun func47  ((A String) (B String) (C Int) ) String (str.++ (str.substr B  C  1 ) A ))
(define-fun func48  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.++ (str.substr A  B  C ) (str.++ D  E )))
(define-fun func49  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func50  ((A String) (B String) (C String) ) String (str.++ (str.++ B  C ) A ))
(define-fun func51  ((A String) (B String) (C Int) (D Int) ) String (str.++ A  (str.substr B  C  D )))
(synth-fun f ((firstname String) (lastname String)) String
( (Start String (ntString))
 (ntString String (
	firstname lastname " " "." 
	(func0 ntString ntInt ntString ntInt)
	(func5 ntString ntInt ntInt ntString ntInt)
	(func29 ntString ntString ntString ntInt)
	(str.++ ntString ntString)
	(str.replace ntString ntString ntString)
	(int.to.str ntInt)
	(str.substr ntString ntInt ntInt)
))
 (ntInt Int (
	0 1 2 
	(func31 ntInt)
	(+ ntInt ntInt)
	(- ntInt ntInt)
	(str.len ntString)
	(str.to.int ntString)
	(ite ntBool ntInt ntInt)
	(str.indexof ntString ntString ntInt)
))
 (ntBool Bool (
	true false
	(str.prefixof ntString ntString)
	(str.suffixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "Launa" "Withers") "L. Withers"))
(constraint (= (f "Launa" "Withers") "L. Withers"))
(constraint (= (f "Launa" "Withers") "L. Withers"))
(constraint (= (f "Lakenya" "Edison") "L. Edison"))
(constraint (= (f "Lakenya" "Edison") "L. Edison"))
(constraint (= (f "Lakenya" "Edison") "L. Edison"))
(constraint (= (f "Brendan" "Hage") "B. Hage"))
(constraint (= (f "Brendan" "Hage") "B. Hage"))
(constraint (= (f "Brendan" "Hage") "B. Hage"))
(constraint (= (f "Bradford" "Lango") "B. Lango"))
(constraint (= (f "Bradford" "Lango") "B. Lango"))
(constraint (= (f "Bradford" "Lango") "B. Lango"))
(constraint (= (f "Rudolf" "Akiyama") "R. Akiyama"))
(constraint (= (f "Rudolf" "Akiyama") "R. Akiyama"))
(constraint (= (f "Rudolf" "Akiyama") "R. Akiyama"))
(constraint (= (f "Lara" "Constable") "L. Constable"))
(constraint (= (f "Lara" "Constable") "L. Constable"))
(constraint (= (f "Lara" "Constable") "L. Constable"))
(constraint (= (f "Madelaine" "Ghoston") "M. Ghoston"))
(constraint (= (f "Madelaine" "Ghoston") "M. Ghoston"))
(constraint (= (f "Madelaine" "Ghoston") "M. Ghoston"))
(constraint (= (f "Salley" "Hornak") "S. Hornak"))
(constraint (= (f "Salley" "Hornak") "S. Hornak"))
(constraint (= (f "Salley" "Hornak") "S. Hornak"))
(constraint (= (f "Micha" "Junkin") "M. Junkin"))
(constraint (= (f "Micha" "Junkin") "M. Junkin"))
(constraint (= (f "Micha" "Junkin") "M. Junkin"))
(constraint (= (f "Teddy" "Bobo") "T. Bobo"))
(constraint (= (f "Teddy" "Bobo") "T. Bobo"))
(constraint (= (f "Teddy" "Bobo") "T. Bobo"))
(constraint (= (f "Coralee" "Scalia") "C. Scalia"))
(constraint (= (f "Coralee" "Scalia") "C. Scalia"))
(constraint (= (f "Coralee" "Scalia") "C. Scalia"))
(constraint (= (f "Jeff" "Quashie") "J. Quashie"))
(constraint (= (f "Jeff" "Quashie") "J. Quashie"))
(constraint (= (f "Jeff" "Quashie") "J. Quashie"))
(constraint (= (f "Vena" "Babiarz") "V. Babiarz"))
(constraint (= (f "Vena" "Babiarz") "V. Babiarz"))
(constraint (= (f "Vena" "Babiarz") "V. Babiarz"))
(constraint (= (f "Karrie" "Lain") "K. Lain"))
(constraint (= (f "Karrie" "Lain") "K. Lain"))
(constraint (= (f "Karrie" "Lain") "K. Lain"))
(constraint (= (f "Tobias" "Dermody") "T. Dermody"))
(constraint (= (f "Tobias" "Dermody") "T. Dermody"))
(constraint (= (f "Tobias" "Dermody") "T. Dermody"))
(constraint (= (f "Celsa" "Hopkins") "C. Hopkins"))
(constraint (= (f "Celsa" "Hopkins") "C. Hopkins"))
(constraint (= (f "Celsa" "Hopkins") "C. Hopkins"))
(constraint (= (f "Kimberley" "Halpern") "K. Halpern"))
(constraint (= (f "Kimberley" "Halpern") "K. Halpern"))
(constraint (= (f "Kimberley" "Halpern") "K. Halpern"))
(constraint (= (f "Phillip" "Rowden") "P. Rowden"))
(constraint (= (f "Phillip" "Rowden") "P. Rowden"))
(constraint (= (f "Phillip" "Rowden") "P. Rowden"))
(constraint (= (f "Elias" "Neil") "E. Neil"))
(constraint (= (f "Elias" "Neil") "E. Neil"))
(constraint (= (f "Elias" "Neil") "E. Neil"))
(constraint (= (f "Lashanda" "Cortes") "L. Cortes"))
(constraint (= (f "Lashanda" "Cortes") "L. Cortes"))
(constraint (= (f "Lashanda" "Cortes") "L. Cortes"))
(constraint (= (f "Mackenzie" "Spell") "M. Spell"))
(constraint (= (f "Mackenzie" "Spell") "M. Spell"))
(constraint (= (f "Mackenzie" "Spell") "M. Spell"))
(constraint (= (f "Kathlyn" "Eccleston") "K. Eccleston"))
(constraint (= (f "Kathlyn" "Eccleston") "K. Eccleston"))
(constraint (= (f "Kathlyn" "Eccleston") "K. Eccleston"))
(constraint (= (f "Georgina" "Brescia") "G. Brescia"))
(constraint (= (f "Georgina" "Brescia") "G. Brescia"))
(constraint (= (f "Georgina" "Brescia") "G. Brescia"))
(constraint (= (f "Beata" "Miah") "B. Miah"))
(constraint (= (f "Beata" "Miah") "B. Miah"))
(constraint (= (f "Beata" "Miah") "B. Miah"))
(constraint (= (f "Desiree" "Seamons") "D. Seamons"))
(constraint (= (f "Desiree" "Seamons") "D. Seamons"))
(constraint (= (f "Desiree" "Seamons") "D. Seamons"))
(constraint (= (f "Jeanice" "Soderstrom") "J. Soderstrom"))
(constraint (= (f "Jeanice" "Soderstrom") "J. Soderstrom"))
(constraint (= (f "Jeanice" "Soderstrom") "J. Soderstrom"))
(constraint (= (f "Mariel" "Jurgens") "M. Jurgens"))
(constraint (= (f "Mariel" "Jurgens") "M. Jurgens"))
(constraint (= (f "Mariel" "Jurgens") "M. Jurgens"))
(constraint (= (f "Alida" "Bogle") "A. Bogle"))
(constraint (= (f "Alida" "Bogle") "A. Bogle"))
(constraint (= (f "Alida" "Bogle") "A. Bogle"))
(constraint (= (f "Jacqualine" "Olague") "J. Olague"))
(constraint (= (f "Jacqualine" "Olague") "J. Olague"))
(constraint (= (f "Jacqualine" "Olague") "J. Olague"))
(constraint (= (f "Joaquin" "Clasen") "J. Clasen"))
(constraint (= (f "Joaquin" "Clasen") "J. Clasen"))
(constraint (= (f "Joaquin" "Clasen") "J. Clasen"))
(constraint (= (f "Samuel" "Richert") "S. Richert"))
(constraint (= (f "Samuel" "Richert") "S. Richert"))
(constraint (= (f "Samuel" "Richert") "S. Richert"))
(constraint (= (f "Malissa" "Marcus") "M. Marcus"))
(constraint (= (f "Malissa" "Marcus") "M. Marcus"))
(constraint (= (f "Malissa" "Marcus") "M. Marcus"))
(constraint (= (f "Alaina" "Partida") "A. Partida"))
(constraint (= (f "Alaina" "Partida") "A. Partida"))
(constraint (= (f "Alaina" "Partida") "A. Partida"))
(constraint (= (f "Trinidad" "Mulloy") "T. Mulloy"))
(constraint (= (f "Trinidad" "Mulloy") "T. Mulloy"))
(constraint (= (f "Trinidad" "Mulloy") "T. Mulloy"))
(constraint (= (f "Carlene" "Garrard") "C. Garrard"))
(constraint (= (f "Carlene" "Garrard") "C. Garrard"))
(constraint (= (f "Carlene" "Garrard") "C. Garrard"))
(constraint (= (f "Melodi" "Chism") "M. Chism"))
(constraint (= (f "Melodi" "Chism") "M. Chism"))
(constraint (= (f "Melodi" "Chism") "M. Chism"))
(constraint (= (f "Bess" "Chilcott") "B. Chilcott"))
(constraint (= (f "Bess" "Chilcott") "B. Chilcott"))
(constraint (= (f "Bess" "Chilcott") "B. Chilcott"))
(constraint (= (f "Chong" "Aylward") "C. Aylward"))
(constraint (= (f "Chong" "Aylward") "C. Aylward"))
(constraint (= (f "Chong" "Aylward") "C. Aylward"))
(constraint (= (f "Jani" "Ramthun") "J. Ramthun"))
(constraint (= (f "Jani" "Ramthun") "J. Ramthun"))
(constraint (= (f "Jani" "Ramthun") "J. Ramthun"))
(constraint (= (f "Jacquiline" "Heintz") "J. Heintz"))
(constraint (= (f "Jacquiline" "Heintz") "J. Heintz"))
(constraint (= (f "Jacquiline" "Heintz") "J. Heintz"))
(constraint (= (f "Hayley" "Marquess") "H. Marquess"))
(constraint (= (f "Hayley" "Marquess") "H. Marquess"))
(constraint (= (f "Hayley" "Marquess") "H. Marquess"))
(constraint (= (f "Andria" "Spagnoli") "A. Spagnoli"))
(constraint (= (f "Andria" "Spagnoli") "A. Spagnoli"))
(constraint (= (f "Andria" "Spagnoli") "A. Spagnoli"))
(constraint (= (f "Irwin" "Covelli") "I. Covelli"))
(constraint (= (f "Irwin" "Covelli") "I. Covelli"))
(constraint (= (f "Irwin" "Covelli") "I. Covelli"))
(constraint (= (f "Gertude" "Montiel") "G. Montiel"))
(constraint (= (f "Gertude" "Montiel") "G. Montiel"))
(constraint (= (f "Gertude" "Montiel") "G. Montiel"))
(constraint (= (f "Stefany" "Reily") "S. Reily"))
(constraint (= (f "Stefany" "Reily") "S. Reily"))
(constraint (= (f "Stefany" "Reily") "S. Reily"))
(constraint (= (f "Rae" "Mcgaughey") "R. Mcgaughey"))
(constraint (= (f "Rae" "Mcgaughey") "R. Mcgaughey"))
(constraint (= (f "Rae" "Mcgaughey") "R. Mcgaughey"))
(constraint (= (f "Cruz" "Latimore") "C. Latimore"))
(constraint (= (f "Cruz" "Latimore") "C. Latimore"))
(constraint (= (f "Cruz" "Latimore") "C. Latimore"))
(constraint (= (f "Maryann" "Casler") "M. Casler"))
(constraint (= (f "Maryann" "Casler") "M. Casler"))
(constraint (= (f "Maryann" "Casler") "M. Casler"))
(constraint (= (f "Annalisa" "Gregori") "A. Gregori"))
(constraint (= (f "Annalisa" "Gregori") "A. Gregori"))
(constraint (= (f "Annalisa" "Gregori") "A. Gregori"))
(constraint (= (f "Jenee" "Pannell") "J. Pannell"))
(constraint (= (f "Jenee" "Pannell") "J. Pannell"))
(constraint (= (f "Jenee" "Pannell") "J. Pannell"))
(constraint (= (f "Launa" "Withers") "L. Withers"))
(constraint (= (f "Lakenya" "Edison") "L. Edison"))
(constraint (= (f "Brendan" "Hage") "B. Hage"))
(constraint (= (f "Bradford" "Lango") "B. Lango"))
(constraint (= (f "Rudolf" "Akiyama") "R. Akiyama"))
(constraint (= (f "Lara" "Constable") "L. Constable"))
(constraint (= (f "Madelaine" "Ghoston") "M. Ghoston"))
(constraint (= (f "Salley" "Hornak") "S. Hornak"))
(constraint (= (f "Micha" "Junkin") "M. Junkin"))
(constraint (= (f "Teddy" "Bobo") "T. Bobo"))
(constraint (= (f "Coralee" "Scalia") "C. Scalia"))
(constraint (= (f "Jeff" "Quashie") "J. Quashie"))
(constraint (= (f "Vena" "Babiarz") "V. Babiarz"))
(constraint (= (f "Karrie" "Lain") "K. Lain"))
(constraint (= (f "Tobias" "Dermody") "T. Dermody"))
(constraint (= (f "Celsa" "Hopkins") "C. Hopkins"))
(constraint (= (f "Kimberley" "Halpern") "K. Halpern"))
(constraint (= (f "Phillip" "Rowden") "P. Rowden"))
(constraint (= (f "Elias" "Neil") "E. Neil"))
(constraint (= (f "Lashanda" "Cortes") "L. Cortes"))
(constraint (= (f "Mackenzie" "Spell") "M. Spell"))
(constraint (= (f "Kathlyn" "Eccleston") "K. Eccleston"))
(constraint (= (f "Georgina" "Brescia") "G. Brescia"))
(constraint (= (f "Beata" "Miah") "B. Miah"))
(constraint (= (f "Desiree" "Seamons") "D. Seamons"))
(constraint (= (f "Jeanice" "Soderstrom") "J. Soderstrom"))
(constraint (= (f "Mariel" "Jurgens") "M. Jurgens"))
(constraint (= (f "Alida" "Bogle") "A. Bogle"))
(constraint (= (f "Jacqualine" "Olague") "J. Olague"))
(constraint (= (f "Joaquin" "Clasen") "J. Clasen"))
(constraint (= (f "Samuel" "Richert") "S. Richert"))
(constraint (= (f "Malissa" "Marcus") "M. Marcus"))
(constraint (= (f "Alaina" "Partida") "A. Partida"))
(constraint (= (f "Trinidad" "Mulloy") "T. Mulloy"))
(constraint (= (f "Carlene" "Garrard") "C. Garrard"))
(constraint (= (f "Melodi" "Chism") "M. Chism"))
(constraint (= (f "Bess" "Chilcott") "B. Chilcott"))
(constraint (= (f "Chong" "Aylward") "C. Aylward"))
(constraint (= (f "Jani" "Ramthun") "J. Ramthun"))
(constraint (= (f "Jacquiline" "Heintz") "J. Heintz"))
(constraint (= (f "Hayley" "Marquess") "H. Marquess"))
(constraint (= (f "Andria" "Spagnoli") "A. Spagnoli"))
(constraint (= (f "Irwin" "Covelli") "I. Covelli"))
(constraint (= (f "Gertude" "Montiel") "G. Montiel"))
(constraint (= (f "Stefany" "Reily") "S. Reily"))
(constraint (= (f "Rae" "Mcgaughey") "R. Mcgaughey"))
(constraint (= (f "Cruz" "Latimore") "C. Latimore"))
(constraint (= (f "Maryann" "Casler") "M. Casler"))
(constraint (= (f "Annalisa" "Gregori") "A. Gregori"))
(constraint (= (f "Jenee" "Pannell") "J. Pannell"))
(check-synth)
