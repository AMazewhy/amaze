(set-logic SLIA)
(define-fun func0  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func1  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func2  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func3  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func4  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func5  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func6  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func7  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func8  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func9  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func10  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func11  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func12  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (- C  D ) B ))
(define-fun func13  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func14  ((A String) ) String (str.substr A  0  1 ))
(define-fun func15  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (+ C  D )))
(define-fun func16  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func17  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func18  ((A String) (B Int) ) String (str.substr A  B  1 ))
(define-fun func19  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (- C  D )))
(define-fun func20  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func21  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func22  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func23  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (- (str.indexof D  E  F ) C ) B ))
(define-fun func24  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func25  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func26  ((A Int) ) Int (+ -1  A ))
(define-fun func27  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func28  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func29  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func30  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  1 )))
(define-fun func31  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func32  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func33  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func34  ((A Int) (B String) (C String) (D Int) ) Int (- (str.indexof B  C  D ) A ))
(define-fun func35  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func36  ((A Int) ) Int (- A  -1 ))
(define-fun func37  ((A String) (B String) (C Int) (D Int) ) String (str.++ (str.substr B  C  D ) A ))
(define-fun func38  ((A String) (B String) (C Int) ) String (str.++ (str.substr B  0  C ) A ))
(define-fun func39  ((A String) (B String) ) String (str.++ (str.substr B  0  1 ) A ))
(define-fun func40  ((A String) (B String) (C Int) ) String (str.++ (str.substr B  C  1 ) A ))
(define-fun func41  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func42  ((A String) (B String) (C String) ) String (str.++ (str.++ B  C ) A ))
(define-fun func43  ((A String) (B String) (C Int) (D Int) ) String (str.++ A  (str.substr B  C  D )))
(define-fun func44  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(synth-fun f ((_arg_0 String)) Int
( (Start Int (ntInt))
 (ntString String (
	_arg_0 "" " " "/n" 
	(func1 ntString ntInt ntString)
	(func2 ntString ntInt ntString ntString ntInt)
	(func3 ntString ntInt ntString ntString)
	(func8 ntString ntInt ntInt ntString ntString)
	(func9 ntString ntInt ntInt ntInt)
	(func10 ntString ntInt ntInt)
	(func16 ntString ntInt ntString ntInt)
	(func17 ntString ntInt ntString ntString ntInt)
	(func19 ntString ntInt ntInt ntInt)
	(func22 ntString ntInt ntInt ntString)
	(func24 ntString ntString ntString ntInt)
	(func25 ntString ntInt ntString)
	(func37 ntString ntString ntInt ntInt)
	(func39 ntString ntString)
	(func42 ntString ntString ntString)
	(func44 ntString ntString ntString ntString)
	(str.++ ntString ntString)
	(str.replace ntString ntString ntString)
	(int.to.str ntInt)
	(str.substr ntString ntInt ntInt)
))
 (ntInt Int (
	1 0 -1 0 1 
	(func27 ntString ntString ntInt)
	(func30 ntInt ntString ntString)
	(func33 ntString ntString)
	(func36 ntInt)
	(+ ntInt ntInt)
	(- ntInt ntInt)
	(str.len ntString)
	(str.to.int ntString)
))
 (ntBool Bool (
	true false
	(= ntInt ntInt)
	(str.prefixof ntString ntString)
	(str.suffixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "one") 1))
(constraint (= (f "one/ntwo") 2))
(constraint (= (f "one/ntwo/nthree") 3))
(check-synth)
