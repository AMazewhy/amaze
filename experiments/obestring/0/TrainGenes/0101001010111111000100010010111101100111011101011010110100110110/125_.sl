(set-logic SLIA)
(define-fun func0  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func1  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func2  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func3  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func4  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func5  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func6  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func7  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func8  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func9  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func10  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func11  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func12  ((A String) (B Int) ) String (str.substr A  1  B ))
(define-fun func13  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func14  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func15  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func16  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func17  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func18  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (- C  D ) B ))
(define-fun func19  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func20  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func21  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func22  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func23  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func24  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (- C  D )))
(define-fun func25  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func26  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func27  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func28  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func29  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func30  ((A Int) (B Int) (C Int) ) Int (+ A  (+ B  C )))
(define-fun func31  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func32  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func33  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  1 )))
(define-fun func34  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func35  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func36  ((A String) (B String) (C String) (D String) ) String (str.replace A  B  (str.++ C  D )))
(define-fun func37  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func38  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func39  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func40  ((A String) (B String) (C String) (D Int) ) String (str.++ A  (str.++ (str.at C  D ) B )))
(define-fun func41  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func42  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func43  ((A String) (B String) (C String) (D String) (E Int) ) String (str.++ A  (str.++ B  (str.++ (str.at D  E ) C ))))
(define-fun func44  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func45  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func46  ((A Int) ) Int (- A  3 ))
(define-fun func47  ((A String) ) String (str.at A  0 ))
(synth-fun f ((name String)) String
( (Start String (ntString))
 (ntString String (
	name " " "(" ")" "-" "." 
	(func1 ntString ntInt ntString)
	(func3 ntString ntInt ntString ntString)
	(func6 ntString ntInt ntInt ntString)
	(func8 ntString ntInt ntInt ntString ntString)
	(func10 ntString ntInt ntInt)
	(func11 ntString ntInt ntInt)
	(func12 ntString ntInt)
	(func13 ntString ntInt)
	(func14 ntString ntString ntInt)
	(func15 ntString ntString)
	(func19 ntString ntInt ntString ntInt)
	(func23 ntString ntInt)
	(func26 ntString ntInt ntInt ntString)
	(func36 ntString ntString ntString ntString)
	(func37 ntString ntString ntString ntString ntString)
	(func38 ntString ntString ntString)
	(func39 ntString ntString ntString ntString)
	(func41 ntString ntString ntInt)
	(func42 ntString ntString)
	(str.replace ntString ntString ntString)
	(int.to.str ntInt)
))
 (ntInt Int (
	0 1 2 3 4 5 
	(func28 ntString ntString ntInt)
	(func29 ntString ntString)
	(func30 ntInt ntInt ntInt)
	(func32 ntInt ntString ntString)
	(func33 ntInt ntString ntString)
	(func34 ntString ntString)
	(func44 ntInt ntString)
	(func46 ntInt)
	(+ ntInt ntInt)
	(str.len ntString)
	(str.to.int ntString)
))
 (ntBool Bool (
	true false
	(= ntInt ntInt)
	(str.contains ntString ntString)
))
))
(constraint (= (f "938-242-504") "938.242.504"))
(constraint (= (f "308-916-545") "308.916.545"))
(constraint (= (f "623-599-749") "623.599.749"))
(constraint (= (f "981-424-843") "981.424.843"))
(constraint (= (f "118-980-214") "118.980.214"))
(constraint (= (f "244-655-094") "244.655.094"))
(check-synth)
