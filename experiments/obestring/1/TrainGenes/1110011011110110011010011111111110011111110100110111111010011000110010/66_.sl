(set-logic SLIA)
(define-fun func0  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func1  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func2  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func3  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func4  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func5  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func6  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func7  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func8  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func9  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func10  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func11  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func12  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func13  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func14  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func15  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func16  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func17  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (- C  D ) B ))
(define-fun func18  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (+ C  D )))
(define-fun func19  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func20  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func21  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func22  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func23  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func24  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (- C  D )))
(define-fun func25  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func26  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  1 )) B ))
(define-fun func27  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func28  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func29  ((A Int) ) Int (+ 1  (+ 1  A )))
(define-fun func30  ((A Int) (B Int) ) Int (+ 1  (+ A  B )))
(define-fun func31  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func32  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func33  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  1 )))
(define-fun func34  ((A Int) (B Int) ) Int (+ A  (+ 1  B )))
(define-fun func35  ((A Int) (B Int) (C Int) ) Int (+ A  (+ B  C )))
(define-fun func36  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func37  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  1 )))
(define-fun func38  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func39  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func40  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func41  ((A String) (B String) (C String) (D String) ) String (str.replace A  B  (str.++ C  D )))
(define-fun func42  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func43  ((A String) (B String) ) Bool (str.contains A  B ))
(define-fun func44  ((A String) ) String (str.at A  0 ))
(define-fun func45  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func46  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func47  ((A String) (B String) (C String) (D Int) ) String (str.++ A  (str.++ (str.at C  D ) B )))
(define-fun func48  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func49  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func50  ((A String) (B Int) (C String) (D String) ) String (str.++ (str.at A  B ) (str.++ C  D )))
(define-fun func51  ((A String) (B String) (C String) (D String) (E Int) ) String (str.++ A  (str.++ B  (str.++ (str.at D  E ) C ))))
(define-fun func52  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func53  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func54  ((A Int) ) Int (- A  3 ))
(synth-fun f ((name String)) String
( (Start String (ntString))
 (ntString String (
	name " " 
	(func0 ntString ntInt ntString ntInt)
	(func1 ntString ntInt ntString)
	(func2 ntString ntInt ntString ntString ntInt)
	(func5 ntString ntInt ntInt ntString ntInt)
	(func6 ntString ntInt ntInt ntString)
	(func8 ntString ntInt ntInt ntString ntString)
	(func9 ntString ntInt ntInt ntInt)
	(func10 ntString ntInt ntInt)
	(func11 ntString ntInt ntInt)
	(func13 ntString ntString ntInt)
	(func14 ntString ntString)
	(func17 ntString ntInt ntInt ntInt)
	(func18 ntString ntInt ntInt ntInt)
	(func20 ntString ntInt ntString)
	(func23 ntString ntInt)
	(func24 ntString ntInt ntInt ntInt)
	(func25 ntString ntInt)
	(func26 ntString ntInt ntInt ntString ntString)
	(func27 ntString ntInt ntInt ntString)
	(func28 ntString ntInt ntString)
	(func41 ntString ntString ntString ntString)
	(func42 ntString ntString ntString ntString ntString)
	(func44 ntString)
	(func45 ntString ntString ntString)
	(func48 ntString ntString ntInt)
	(func49 ntString ntString)
	(func50 ntString ntInt ntString ntString)
	(func51 ntString ntString ntString ntString ntInt)
	(str.replace ntString ntString ntString)
	(int.to.str ntInt)
	(ite ntBool ntString ntString)
))
 (ntInt Int (
	0 1 2 
	(func29 ntInt)
	(func30 ntInt ntInt)
	(func31 ntString ntString ntInt)
	(func33 ntString ntString)
	(func36 ntInt ntString ntString ntInt)
	(func37 ntInt ntString ntString)
	(func39 ntString ntString)
	(func40 ntString ntString)
	(func52 ntInt ntString)
	(func53 ntString)
	(func54 ntInt)
	(- ntInt ntInt)
	(str.len ntString)
	(str.to.int ntString)
))
 (ntBool Bool (
	true false
	(= ntInt ntInt)
	(str.prefixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "Nancy FreeHafer") "Nancy"))
(constraint (= (f "Andrew Cencici") "Andrew"))
(constraint (= (f "Jan Kotas") "Jan"))
(constraint (= (f "Mariya Sergienko") "Mariya"))
(constraint (= (f "Launa Withers") "Launa"))
(constraint (= (f "Lakenya Edison") "Lakenya"))
(constraint (= (f "Brendan Hage") "Brendan"))
(constraint (= (f "Bradford Lango") "Bradford"))
(constraint (= (f "Rudolf Akiyama") "Rudolf"))
(constraint (= (f "Lara Constable") "Lara"))
(constraint (= (f "Madelaine Ghoston") "Madelaine"))
(constraint (= (f "Salley Hornak") "Salley"))
(constraint (= (f "Micha Junkin") "Micha"))
(constraint (= (f "Teddy Bobo") "Teddy"))
(constraint (= (f "Coralee Scalia") "Coralee"))
(constraint (= (f "Jeff Quashie") "Jeff"))
(constraint (= (f "Vena Babiarz") "Vena"))
(constraint (= (f "Karrie Lain") "Karrie"))
(constraint (= (f "Tobias Dermody") "Tobias"))
(constraint (= (f "Celsa Hopkins") "Celsa"))
(constraint (= (f "Kimberley Halpern") "Kimberley"))
(constraint (= (f "Phillip Rowden") "Phillip"))
(constraint (= (f "Elias Neil") "Elias"))
(constraint (= (f "Lashanda Cortes") "Lashanda"))
(constraint (= (f "Mackenzie Spell") "Mackenzie"))
(constraint (= (f "Kathlyn Eccleston") "Kathlyn"))
(constraint (= (f "Georgina Brescia") "Georgina"))
(constraint (= (f "Beata Miah") "Beata"))
(constraint (= (f "Desiree Seamons") "Desiree"))
(constraint (= (f "Jeanice Soderstrom") "Jeanice"))
(constraint (= (f "Mariel Jurgens") "Mariel"))
(constraint (= (f "Alida Bogle") "Alida"))
(constraint (= (f "Jacqualine Olague") "Jacqualine"))
(constraint (= (f "Joaquin Clasen") "Joaquin"))
(constraint (= (f "Samuel Richert") "Samuel"))
(constraint (= (f "Malissa Marcus") "Malissa"))
(constraint (= (f "Alaina Partida") "Alaina"))
(constraint (= (f "Trinidad Mulloy") "Trinidad"))
(constraint (= (f "Carlene Garrard") "Carlene"))
(constraint (= (f "Melodi Chism") "Melodi"))
(constraint (= (f "Bess Chilcott") "Bess"))
(constraint (= (f "Chong Aylward") "Chong"))
(constraint (= (f "Jani Ramthun") "Jani"))
(constraint (= (f "Jacquiline Heintz") "Jacquiline"))
(constraint (= (f "Hayley Marquess") "Hayley"))
(constraint (= (f "Andria Spagnoli") "Andria"))
(constraint (= (f "Irwin Covelli") "Irwin"))
(constraint (= (f "Gertude Montiel") "Gertude"))
(constraint (= (f "Stefany Reily") "Stefany"))
(constraint (= (f "Rae Mcgaughey") "Rae"))
(constraint (= (f "Cruz Latimore") "Cruz"))
(constraint (= (f "Maryann Casler") "Maryann"))
(constraint (= (f "Annalisa Gregori") "Annalisa"))
(constraint (= (f "Jenee Pannell") "Jenee"))
(check-synth)
