(set-logic SLIA)
(define-fun func0  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func1  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func2  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func3  ((A String) (B String) (C String) (D Int) ) String (str.++ A  (str.++ (str.at C  D ) B )))
(define-fun func4  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func5  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func6  ((A String) (B Int) (C String) (D String) ) String (str.++ (str.at A  B ) (str.++ C  D )))
(define-fun func7  ((A String) (B String) (C String) (D String) (E Int) ) String (str.++ A  (str.++ B  (str.++ (str.at D  E ) C ))))
(define-fun func8  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func9  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func10  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func11  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func12  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func13  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func14  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func15  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func16  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func17  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func18  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func19  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func20  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func21  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func22  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func23  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func24  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func25  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (+ C  D )))
(define-fun func26  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func27  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func28  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func29  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func30  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func31  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func32  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  1 )) B ))
(define-fun func33  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func34  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func35  ((A Int) ) Int (+ 1  (+ 1  A )))
(define-fun func36  ((A Int) (B Int) ) Int (+ 1  (+ A  B )))
(define-fun func37  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func38  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  1 )))
(define-fun func39  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func40  ((A Int) (B Int) ) Int (+ A  (+ 1  B )))
(define-fun func41  ((A Int) (B Int) (C Int) ) Int (+ A  (+ B  C )))
(define-fun func42  ((A Int) ) Int (+ A  -1 ))
(define-fun func43  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func44  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  1 )))
(define-fun func45  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func46  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func47  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func48  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func49  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func50  ((A Int) ) Int (- A  3 ))
(define-fun func51  ((A String) ) String (str.at A  0 ))
(synth-fun f ((name String)) String
( (Start String (ntString))
 (ntString String (
	name " " "+" "-" "." 
	(func0 ntString ntString ntString ntString ntString)
	(func1 ntString ntString ntString)
	(func2 ntString ntString ntString ntString)
	(func5 ntString ntString)
	(func6 ntString ntInt ntString ntString)
	(func9 ntString ntInt ntString)
	(func10 ntString ntInt ntString ntString ntInt)
	(func11 ntString ntInt ntString ntString)
	(func12 ntString ntInt ntInt)
	(func15 ntString ntInt ntInt ntString ntString ntInt)
	(func18 ntString ntInt ntInt)
	(func19 ntString ntInt ntInt)
	(func20 ntString ntInt)
	(func21 ntString ntString ntInt)
	(func22 ntString ntString)
	(func23 ntString ntString ntString ntInt)
	(func25 ntString ntInt ntInt ntInt)
	(func26 ntString ntInt ntString ntInt)
	(func27 ntString ntInt ntString)
	(func31 ntString ntInt)
	(func32 ntString ntInt ntInt ntString ntString)
	(func34 ntString ntInt ntString)
	(str.++ ntString ntString)
	(str.replace ntString ntString ntString)
	(str.at ntString ntInt)
	(int.to.str ntInt)
))
 (ntInt Int (
	0 1 2 3 
	(func35 ntInt)
	(func36 ntInt ntInt)
	(func37 ntString ntString ntInt)
	(func40 ntInt ntInt)
	(func42 ntInt)
	(func46 ntString ntString)
	(func48 ntInt ntString)
	(func49 ntString)
	(func50 ntInt)
	(str.len ntString)
	(str.to.int ntString)
	(str.indexof ntString ntString ntInt)
))
 (ntBool Bool (
	true false
	(= ntInt ntInt)
	(str.prefixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "+106 769-858-438") "438"))
(constraint (= (f "+83 973-757-831") "831"))
(constraint (= (f "+62 647-787-775") "775"))
(constraint (= (f "+172 027-507-632") "632"))
(constraint (= (f "+72 001-050-856") "856"))
(constraint (= (f "+95 310-537-401") "401"))
(constraint (= (f "+6 775-969-238") "238"))
(check-synth)
