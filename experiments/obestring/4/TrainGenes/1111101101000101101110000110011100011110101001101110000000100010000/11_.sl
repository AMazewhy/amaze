(set-logic SLIA)
(define-fun func0  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func1  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func2  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func3  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func4  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func5  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func6  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func7  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func8  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func9  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func10  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func11  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func12  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func13  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func14  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func15  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func16  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func17  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (- C  D ) B ))
(define-fun func18  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func19  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func20  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func21  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func22  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func23  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (+ C  D )))
(define-fun func24  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func25  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func26  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func27  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  1 )))
(define-fun func28  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func29  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (- C  D )))
(define-fun func30  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func31  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func32  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  1 )) B ))
(define-fun func33  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func34  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  1 )))
(define-fun func35  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func36  ((A Int) ) Int (+ -1  A ))
(define-fun func37  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func38  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func39  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  1 )))
(define-fun func40  ((A Int) (B Int) (C Int) ) Int (+ A  (+ B  C )))
(define-fun func41  ((A Int) ) Int (+ A  -1 ))
(define-fun func42  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func43  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  1 )))
(define-fun func44  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func45  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func46  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func47  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func48  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func49  ((A Int) ) Int (- A  3 ))
(define-fun func50  ((A String) ) String (str.at A  0 ))
(synth-fun f ((_arg_0 String)) String
( (Start String (ntString))
 (ntString String (
	_arg_0 "" " " 
	(func0 ntString ntString ntString ntString ntString)
	(func1 ntString ntString ntString)
	(func2 ntString ntString ntString ntString)
	(func3 ntString ntString ntInt)
	(func4 ntString ntString)
	(func6 ntString ntInt ntString)
	(func7 ntString ntInt ntString ntString ntInt)
	(func9 ntString ntInt ntInt)
	(func13 ntString ntInt ntInt ntString ntString)
	(func15 ntString ntInt ntInt)
	(func16 ntString ntInt ntInt)
	(func18 ntString ntInt)
	(func19 ntString ntString ntInt)
	(func20 ntString ntString)
	(func25 ntString ntInt ntString)
	(func26 ntString ntInt ntString ntString ntInt)
	(func29 ntString ntInt ntInt ntInt)
	(func30 ntString ntInt)
	(func31 ntString ntInt)
	(func35 ntString ntInt ntString)
	(func50 ntString)
	(str.++ ntString ntString)
	(str.replace ntString ntString ntString)
	(str.at ntString ntInt)
	(int.to.str ntInt)
	(ite ntBool ntString ntString)
	(str.substr ntString ntInt ntInt)
))
 (ntInt Int (
	1 0 -1 1 2 3 4 5 
	(func36 ntInt)
	(func37 ntString ntString ntInt)
	(func39 ntString ntString)
	(func41 ntInt)
	(func44 ntInt ntString ntString)
	(func45 ntString ntString)
	(func47 ntInt ntString)
	(func48 ntString)
	(func49 ntInt)
	(+ ntInt ntInt)
	(str.len ntString)
	(str.to.int ntString)
	(ite ntBool ntInt ntInt)
))
 (ntBool Bool (
	true false
	(= ntInt ntInt)
	(str.prefixof ntString ntString)
	(str.suffixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "Tire Pressure ABC123873 Monitor") "ABC123873"))
(constraint (= (f " Oil Life ABC849999999021 gauge") "ABC849999999021"))
(constraint (= (f " Air conditioner GHF211 maintenance") "GHF211"))
(check-synth)
