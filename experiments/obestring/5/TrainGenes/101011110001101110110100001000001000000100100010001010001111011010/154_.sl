(set-logic SLIA)
(define-fun func0  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func1  ((A String) (B String) (C String) (D String) ) String (str.replace A  B  (str.++ C  D )))
(define-fun func2  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func3  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func4  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func5  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func6  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func7  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func8  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func9  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func10  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func11  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func12  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func13  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func14  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func15  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func16  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (- C  D ) B ))
(define-fun func17  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func18  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func19  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func20  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func21  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  1 )))
(define-fun func22  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func23  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (+ C  D )))
(define-fun func24  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func25  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  1 )))
(define-fun func26  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func27  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func28  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  1 )))
(define-fun func29  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func30  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (- C  D )))
(define-fun func31  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func32  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func33  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  1 )) B ))
(define-fun func34  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func35  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func36  ((A Int) ) Int (+ -1  A ))
(define-fun func37  ((A Int) ) Int (+ 1  A ))
(define-fun func38  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func39  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func40  ((A Int) (B Int) (C Int) ) Int (+ A  (+ B  C )))
(define-fun func41  ((A Int) ) Int (+ A  -1 ))
(define-fun func42  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func43  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  1 )))
(define-fun func44  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func45  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func46  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func47  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func48  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func49  ((A Int) ) Int (- A  3 ))
(define-fun func50  ((A String) (B String) ) Bool (str.contains A  B ))
(synth-fun f ((_arg_0 String) (_arg_1 String) (_arg_2 Int)) Int
( (Start Int (ntInt))
 (ntString String (
	_arg_0 _arg_1 "" " " 
	(func0 ntString ntString ntString ntString ntString)
	(func2 ntString ntString ntString)
	(func4 ntString ntInt ntString ntInt)
	(func5 ntString ntInt ntString)
	(func6 ntString ntInt ntString ntString ntInt)
	(func7 ntString ntInt ntString ntString)
	(func11 ntString ntInt ntInt ntString ntString ntInt)
	(func12 ntString ntInt ntInt ntString ntString)
	(func14 ntString ntInt ntInt)
	(func15 ntString ntInt ntInt)
	(func16 ntString ntInt ntInt ntInt)
	(func18 ntString ntString ntInt)
	(func19 ntString ntString)
	(func21 ntString ntString ntString)
	(func26 ntString ntInt ntString)
	(func32 ntString ntInt)
	(str.replace ntString ntString ntString)
	(int.to.str ntInt)
	(ite ntBool ntString ntString)
	(str.substr ntString ntInt ntInt)
))
 (ntInt Int (
	_arg_2 1 0 -1 1 2 3 
	(func39 ntString ntString)
	(func42 ntInt ntString ntString ntInt)
	(func46 ntString ntString)
	(ite ntBool ntInt ntInt)
))
 (ntBool Bool (
	true false
	(str.prefixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "100x15x50" "x" 2) 7))
(constraint (= (f "cat-in-the-hat" "-" 3) 11))
(check-synth)
