(set-logic SLIA)
(define-fun func0  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func1  ((A String) (B String) (C String) (D String) ) String (str.replace A  B  (str.++ C  D )))
(define-fun func2  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func3  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func4  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func5  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func6  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func7  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func8  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func9  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func10  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func11  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func12  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func13  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func14  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func15  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func16  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (- C  D ) B ))
(define-fun func17  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func18  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func19  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func20  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func21  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  1 )))
(define-fun func22  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func23  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (+ C  D )))
(define-fun func24  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func25  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  1 )))
(define-fun func26  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func27  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func28  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  1 )))
(define-fun func29  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func30  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (- C  D )))
(define-fun func31  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func32  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func33  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  1 )) B ))
(define-fun func34  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func35  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func36  ((A Int) ) Int (+ -1  A ))
(define-fun func37  ((A Int) ) Int (+ 1  A ))
(define-fun func38  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func39  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func40  ((A Int) (B Int) (C Int) ) Int (+ A  (+ B  C )))
(define-fun func41  ((A Int) ) Int (+ A  -1 ))
(define-fun func42  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func43  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  1 )))
(define-fun func44  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func45  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func46  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(define-fun func47  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func48  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func49  ((A Int) ) Int (- A  3 ))
(define-fun func50  ((A String) (B String) ) Bool (str.contains A  B ))
(synth-fun f ((_arg_0 String) (_arg_1 String) (_arg_2 String) (_arg_3 String)) Bool
( (Start Bool (ntBool))
 (ntString String (
	_arg_0 _arg_1 _arg_2 _arg_3 "" " " 
	(func0 ntString ntString ntString ntString ntString)
	(func2 ntString ntString ntString)
	(func3 ntString ntString ntString ntString)
	(func4 ntString ntInt ntString ntInt)
	(func8 ntString ntInt ntInt)
	(func15 ntString ntInt ntInt)
	(func17 ntString ntInt)
	(func18 ntString ntString ntInt)
	(func22 ntString ntString ntString)
	(func31 ntString ntInt)
	(func32 ntString ntInt)
	(func33 ntString ntInt ntInt ntString ntString)
	(func34 ntString ntInt ntInt ntString)
	(str.++ ntString ntString)
	(int.to.str ntInt)
))
 (ntInt Int (
	1 0 -1 
	(func36 ntInt)
	(func37 ntInt)
	(func40 ntInt ntInt ntInt)
	(func41 ntInt)
	(func42 ntInt ntString ntString ntInt)
	(func46 ntString ntString)
	(func47 ntInt ntString)
	(func49 ntInt)
	(+ ntInt ntInt)
))
 (ntBool Bool (
	true false
	(str.prefixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "red ball, green sweater" "red" "green" "pink") true))
(constraint (= (f "pink ball, green sweater" "red" "green" "pink") false))
(constraint (= (f "blue sea, pink ribbon" "red" "blue" "pink") false))
(constraint (= (f "black sea, white ribbon" "red" "blue" "pink") false))
(constraint (= (f "red green blue" "red" "blue" "pink") true))
(check-synth)
