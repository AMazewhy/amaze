(set-logic SLIA)
(define-fun func0  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func1  ((A String) (B String) (C String) (D String) ) String (str.replace A  B  (str.++ C  D )))
(define-fun func2  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func3  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func4  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func5  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func6  ((A String) (B String) (C String) (D String) (E String) ) String (str.++ A  (str.++ B  (str.++ C  (str.++ D  E )))))
(define-fun func7  ((A Int) ) Int (+ 1  A ))
(define-fun func8  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func9  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func10  ((A Int) ) Int (+ -1  A ))
(define-fun func11  ((A Int) (B Int) (C Int) ) Int (+ A  (+ B  C )))
(define-fun func12  ((A Int) ) Int (+ A  -1 ))
(define-fun func13  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func14  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  1 )))
(define-fun func15  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func16  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func17  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func18  ((A Int) ) Int (- A  3 ))
(define-fun func19  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func20  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func21  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func22  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func23  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func24  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func25  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func26  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func27  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func28  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func29  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func30  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func31  ((A String) (B Int) ) String (str.substr A  1  B ))
(define-fun func32  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func33  ((A String) (B Int) (C Int) ) String (str.substr A  0  (+ B  C )))
(define-fun func34  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func35  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func36  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func37  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  1 )))
(define-fun func38  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func39  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (+ C  D )))
(define-fun func40  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (- C  D )))
(define-fun func41  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func42  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func43  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func44  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  1 )))
(define-fun func45  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func46  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func47  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  1 )))
(define-fun func48  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func49  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func50  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func51  ((A String) (B String) ) Bool (str.contains A  B ))
(define-fun func52  ((A String) ) String (str.at A  0 ))
(define-fun func53  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func54  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(synth-fun f ((firstname String) (lastname String)) String
( (Start String (ntString))
 (ntString String (
	firstname lastname " " 
	(func0 ntString ntString ntString ntString ntString)
	(func1 ntString ntString ntString ntString)
	(func2 ntString ntString ntString)
	(func3 ntString ntString ntString ntString)
	(func5 ntString ntString)
	(func6 ntString ntString ntString ntString ntString)
	(func19 ntString ntInt ntString ntInt)
	(func20 ntString ntInt ntString)
	(func23 ntString ntInt ntInt)
	(func24 ntString ntInt ntInt ntString ntInt)
	(func27 ntString ntInt ntInt ntString ntString)
	(func32 ntString ntInt)
	(func35 ntString ntString)
	(func36 ntString ntString ntString ntInt)
	(func37 ntString ntString ntString)
	(func38 ntString ntString ntString)
	(func40 ntString ntInt ntInt ntInt)
	(func41 ntString ntInt)
	(func42 ntString ntInt)
	(func44 ntString ntInt ntString)
	(func45 ntString ntInt ntString)
	(func47 ntString ntInt ntString ntString)
	(func50 ntString ntInt ntString)
	(func52 ntString)
	(str.++ ntString ntString)
	(str.replace ntString ntString ntString)
))
 (ntInt Int (
	0 1 2 
	(func7 ntInt)
	(func8 ntString ntString ntInt)
	(func11 ntInt ntInt ntInt)
	(func12 ntInt)
	(func13 ntInt ntString ntString ntInt)
	(func15 ntInt ntString ntString)
	(func17 ntString)
	(func18 ntInt)
	(- ntInt ntInt)
	(str.len ntString)
	(str.to.int ntString)
))
 (ntBool Bool (
	true false
	(str.suffixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "Launa" "Withers") "Launa Withers"))
(constraint (= (f "Lakenya" "Edison") "Lakenya Edison"))
(constraint (= (f "Brendan" "Hage") "Brendan Hage"))
(constraint (= (f "Bradford" "Lango") "Bradford Lango"))
(constraint (= (f "Rudolf" "Akiyama") "Rudolf Akiyama"))
(constraint (= (f "Lara" "Constable") "Lara Constable"))
(constraint (= (f "Madelaine" "Ghoston") "Madelaine Ghoston"))
(constraint (= (f "Salley" "Hornak") "Salley Hornak"))
(constraint (= (f "Micha" "Junkin") "Micha Junkin"))
(constraint (= (f "Teddy" "Bobo") "Teddy Bobo"))
(constraint (= (f "Coralee" "Scalia") "Coralee Scalia"))
(constraint (= (f "Jeff" "Quashie") "Jeff Quashie"))
(constraint (= (f "Vena" "Babiarz") "Vena Babiarz"))
(constraint (= (f "Karrie" "Lain") "Karrie Lain"))
(constraint (= (f "Tobias" "Dermody") "Tobias Dermody"))
(constraint (= (f "Celsa" "Hopkins") "Celsa Hopkins"))
(constraint (= (f "Kimberley" "Halpern") "Kimberley Halpern"))
(constraint (= (f "Phillip" "Rowden") "Phillip Rowden"))
(constraint (= (f "Elias" "Neil") "Elias Neil"))
(constraint (= (f "Lashanda" "Cortes") "Lashanda Cortes"))
(constraint (= (f "Mackenzie" "Spell") "Mackenzie Spell"))
(constraint (= (f "Kathlyn" "Eccleston") "Kathlyn Eccleston"))
(constraint (= (f "Georgina" "Brescia") "Georgina Brescia"))
(constraint (= (f "Beata" "Miah") "Beata Miah"))
(constraint (= (f "Desiree" "Seamons") "Desiree Seamons"))
(constraint (= (f "Jeanice" "Soderstrom") "Jeanice Soderstrom"))
(constraint (= (f "Mariel" "Jurgens") "Mariel Jurgens"))
(constraint (= (f "Alida" "Bogle") "Alida Bogle"))
(constraint (= (f "Jacqualine" "Olague") "Jacqualine Olague"))
(constraint (= (f "Joaquin" "Clasen") "Joaquin Clasen"))
(constraint (= (f "Samuel" "Richert") "Samuel Richert"))
(constraint (= (f "Malissa" "Marcus") "Malissa Marcus"))
(constraint (= (f "Alaina" "Partida") "Alaina Partida"))
(constraint (= (f "Trinidad" "Mulloy") "Trinidad Mulloy"))
(constraint (= (f "Carlene" "Garrard") "Carlene Garrard"))
(constraint (= (f "Melodi" "Chism") "Melodi Chism"))
(constraint (= (f "Bess" "Chilcott") "Bess Chilcott"))
(constraint (= (f "Chong" "Aylward") "Chong Aylward"))
(constraint (= (f "Jani" "Ramthun") "Jani Ramthun"))
(constraint (= (f "Jacquiline" "Heintz") "Jacquiline Heintz"))
(constraint (= (f "Hayley" "Marquess") "Hayley Marquess"))
(constraint (= (f "Andria" "Spagnoli") "Andria Spagnoli"))
(constraint (= (f "Irwin" "Covelli") "Irwin Covelli"))
(constraint (= (f "Gertude" "Montiel") "Gertude Montiel"))
(constraint (= (f "Stefany" "Reily") "Stefany Reily"))
(constraint (= (f "Rae" "Mcgaughey") "Rae Mcgaughey"))
(constraint (= (f "Cruz" "Latimore") "Cruz Latimore"))
(constraint (= (f "Maryann" "Casler") "Maryann Casler"))
(constraint (= (f "Annalisa" "Gregori") "Annalisa Gregori"))
(constraint (= (f "Jenee" "Pannell") "Jenee Pannell"))
(check-synth)
