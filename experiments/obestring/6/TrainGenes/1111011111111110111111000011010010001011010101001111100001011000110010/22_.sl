(set-logic SLIA)
(define-fun func0  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func1  ((A String) (B String) (C String) (D String) ) String (str.replace A  B  (str.++ C  D )))
(define-fun func2  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func3  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func4  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func5  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func6  ((A String) (B String) (C String) (D String) (E String) ) String (str.++ A  (str.++ B  (str.++ C  (str.++ D  E )))))
(define-fun func7  ((A Int) ) Int (+ 1  A ))
(define-fun func8  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func9  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func10  ((A Int) ) Int (+ -1  A ))
(define-fun func11  ((A Int) (B Int) (C Int) ) Int (+ A  (+ B  C )))
(define-fun func12  ((A Int) ) Int (+ A  -1 ))
(define-fun func13  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func14  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  1 )))
(define-fun func15  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func16  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func17  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func18  ((A Int) ) Int (- A  3 ))
(define-fun func19  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func20  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func21  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func22  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func23  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func24  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func25  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func26  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func27  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func28  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func29  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func30  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func31  ((A String) (B Int) ) String (str.substr A  1  B ))
(define-fun func32  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func33  ((A String) (B Int) (C Int) ) String (str.substr A  0  (+ B  C )))
(define-fun func34  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func35  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func36  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func37  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  1 )))
(define-fun func38  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func39  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (+ C  D )))
(define-fun func40  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (- C  D )))
(define-fun func41  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func42  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func43  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func44  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  1 )))
(define-fun func45  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func46  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func47  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  1 )))
(define-fun func48  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func49  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func50  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func51  ((A String) (B String) ) Bool (str.contains A  B ))
(define-fun func52  ((A String) ) String (str.at A  0 ))
(define-fun func53  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func54  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(synth-fun f ((_arg_0 String)) Bool
( (Start Bool (ntBool))
 (ntString String (
	_arg_0 "" " " "overhead" "some project" "other" "boo" "," 
	(func0 ntString ntString ntString ntString ntString)
	(func1 ntString ntString ntString ntString)
	(func2 ntString ntString ntString)
	(func3 ntString ntString ntString ntString)
	(func5 ntString ntString)
	(func6 ntString ntString ntString ntString ntString)
	(func19 ntString ntInt ntString ntInt)
	(func20 ntString ntInt ntString)
	(func21 ntString ntInt ntString ntString ntInt)
	(func22 ntString ntInt ntString ntString)
	(func23 ntString ntInt ntInt)
	(func24 ntString ntInt ntInt ntString ntInt)
	(func25 ntString ntInt ntInt ntString)
	(func26 ntString ntInt ntInt ntString ntString ntInt)
	(func28 ntString ntInt ntInt ntInt)
	(func29 ntString ntInt ntInt)
	(func30 ntString ntInt ntInt)
	(func31 ntString ntInt)
	(func32 ntString ntInt)
	(func33 ntString ntInt ntInt)
	(func38 ntString ntString ntString)
	(func39 ntString ntInt ntInt ntInt)
	(func41 ntString ntInt)
	(func44 ntString ntInt ntString)
	(func48 ntString ntInt ntString ntString)
	(func50 ntString ntInt ntString)
	(func52 ntString)
	(str.++ ntString ntString)
	(str.replace ntString ntString ntString)
	(str.at ntString ntInt)
	(ite ntBool ntString ntString)
))
 (ntInt Int (
	1 0 -1 
	(func8 ntString ntString ntInt)
	(func10 ntInt)
	(func12 ntInt)
	(func15 ntInt ntString ntString)
	(func16 ntInt ntString)
	(func17 ntString)
	(func18 ntInt)
	(func53 ntString ntString)
	(- ntInt ntInt)
	(str.len ntString)
	(str.to.int ntString)
))
 (ntBool Bool (
	true false
	(= ntInt ntInt)
	(str.prefixof ntString ntString)
	(str.contains ntString ntString)
))
))
(constraint (= (f "some project,other project") true))
(constraint (= (f "some project") true))
(constraint (= (f "overhead") false))
(constraint (= (f "some project, overhead") false))
(constraint (= (f "some project, other, boo") true))
(check-synth)
