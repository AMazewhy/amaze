(set-logic SLIA)
(define-fun func0  ((A String) (B String) (C String) (D String) (E String) ) String (str.replace (str.replace C  D  E ) A  B ))
(define-fun func1  ((A String) (B String) (C String) (D String) ) String (str.replace A  B  (str.++ C  D )))
(define-fun func2  ((A String) (B String) (C String) ) String (str.++ A  (str.++ B  C )))
(define-fun func3  ((A String) (B String) (C String) (D String) ) String (str.++ A  (str.++ B  (str.++ C  D ))))
(define-fun func4  ((A String) (B String) (C Int) ) String (str.++ (str.at B  C ) A ))
(define-fun func5  ((A String) (B String) ) String (str.++ (str.at B  0 ) A ))
(define-fun func6  ((A String) (B String) (C String) (D String) (E String) ) String (str.++ A  (str.++ B  (str.++ C  (str.++ D  E )))))
(define-fun func7  ((A Int) ) Int (+ 1  A ))
(define-fun func8  ((A String) (B String) (C Int) ) Int (+ 1  (str.indexof A  B  C )))
(define-fun func9  ((A String) (B String) ) Int (+ 1  (str.indexof A  B  0 )))
(define-fun func10  ((A Int) ) Int (+ -1  A ))
(define-fun func11  ((A Int) (B Int) (C Int) ) Int (+ A  (+ B  C )))
(define-fun func12  ((A Int) ) Int (+ A  -1 ))
(define-fun func13  ((A Int) (B String) (C String) (D Int) ) Int (+ A  (str.indexof B  C  D )))
(define-fun func14  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  1 )))
(define-fun func15  ((A Int) (B String) (C String) ) Int (+ A  (str.indexof B  C  0 )))
(define-fun func16  ((A Int) (B String) ) Int (- (str.len B ) A ))
(define-fun func17  ((A String) ) Int (- (str.len A ) 3 ))
(define-fun func18  ((A Int) ) Int (- A  3 ))
(define-fun func19  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  (+ 1  (str.indexof A  C  D )) B ))
(define-fun func20  ((A String) (B Int) (C String) ) String (str.substr A  (+ 1  (str.indexof A  C  0 )) B ))
(define-fun func21  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  (+ 1  (str.indexof C  D  E )) B ))
(define-fun func22  ((A String) (B Int) (C String) (D String) ) String (str.substr A  (+ 1  (str.indexof C  D  0 )) B ))
(define-fun func23  ((A String) (B Int) (C Int) ) String (str.substr A  (+ 1  C ) B ))
(define-fun func24  ((A String) (B Int) (C Int) (D String) (E Int) ) String (str.substr A  (+ C  (str.indexof A  D  E )) B ))
(define-fun func25  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ C  (str.indexof A  D  0 )) B ))
(define-fun func26  ((A String) (B Int) (C Int) (D String) (E String) (F Int) ) String (str.substr A  (+ C  (str.indexof D  E  F )) B ))
(define-fun func27  ((A String) (B Int) (C Int) (D String) (E String) ) String (str.substr A  (+ C  (str.indexof D  E  0 )) B ))
(define-fun func28  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  (+ C  D ) B ))
(define-fun func29  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) 3 ))
(define-fun func30  ((A String) (B Int) (C Int) ) String (str.substr A  (+ B  C ) (str.len A )))
(define-fun func31  ((A String) (B Int) ) String (str.substr A  1  B ))
(define-fun func32  ((A String) (B Int) ) String (str.substr A  0  B ))
(define-fun func33  ((A String) (B Int) (C Int) ) String (str.substr A  0  (+ B  C )))
(define-fun func34  ((A String) (B String) (C Int) ) String (str.substr A  0  (str.indexof A  B  C )))
(define-fun func35  ((A String) (B String) ) String (str.substr A  0  (str.indexof A  B  0 )))
(define-fun func36  ((A String) (B String) (C String) (D Int) ) String (str.substr A  0  (str.indexof B  C  D )))
(define-fun func37  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  1 )))
(define-fun func38  ((A String) (B String) (C String) ) String (str.substr A  0  (str.indexof B  C  0 )))
(define-fun func39  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (+ C  D )))
(define-fun func40  ((A String) (B Int) (C Int) (D Int) ) String (str.substr A  B  (- C  D )))
(define-fun func41  ((A String) (B Int) ) String (str.substr A  B  3 ))
(define-fun func42  ((A String) (B Int) ) String (str.substr A  B  (str.len A )))
(define-fun func43  ((A String) (B Int) (C String) (D Int) ) String (str.substr A  B  (str.indexof A  C  D )))
(define-fun func44  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  1 )))
(define-fun func45  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.indexof A  C  0 )))
(define-fun func46  ((A String) (B Int) (C String) (D String) (E Int) ) String (str.substr A  B  (str.indexof C  D  E )))
(define-fun func47  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  1 )))
(define-fun func48  ((A String) (B Int) (C String) (D String) ) String (str.substr A  B  (str.indexof C  D  0 )))
(define-fun func49  ((A String) (B Int) (C Int) (D String) ) String (str.substr A  (+ B  C ) (str.len D )))
(define-fun func50  ((A String) (B Int) (C String) ) String (str.substr A  B  (str.len C )))
(define-fun func51  ((A String) (B String) ) Bool (str.contains A  B ))
(define-fun func52  ((A String) ) String (str.at A  0 ))
(define-fun func53  ((A String) (B String) ) Int (str.indexof A  B  1 ))
(define-fun func54  ((A String) (B String) ) Int (str.indexof A  B  0 ))
(synth-fun f ((col1 String) (col2 String)) String
( (Start String (ntString))
 (ntString String (
	col1 col2 " " "," "USA" "AK" "AZ" "AR" "CA" "CO" "CT" "DE" "FL" "GA" "HI" "ID" "IL" "IN" "IA" "KS" "KY" "LA" "ME" "MD" "MA" "MI" "MN" "MS" "MO" "MT" "NE" "NV" "NH" "NJ" "NM" "NY" "NC" "ND" "OH" "OK" "OR" "PA" "RI" "SC" "SD" "TN" "TX" "UT" "VT" "VA" "WA" "WV" "WI" "New York" 
	(func0 ntString ntString ntString ntString ntString)
	(func1 ntString ntString ntString ntString)
	(func2 ntString ntString ntString)
	(func3 ntString ntString ntString ntString)
	(func4 ntString ntString ntInt)
	(func5 ntString ntString)
	(func6 ntString ntString ntString ntString ntString)
	(func20 ntString ntInt ntString)
	(func21 ntString ntInt ntString ntString ntInt)
	(func23 ntString ntInt ntInt)
	(func24 ntString ntInt ntInt ntString ntInt)
	(func25 ntString ntInt ntInt ntString)
	(func26 ntString ntInt ntInt ntString ntString ntInt)
	(func27 ntString ntInt ntInt ntString ntString)
	(func29 ntString ntInt ntInt)
	(func30 ntString ntInt ntInt)
	(func32 ntString ntInt)
	(func33 ntString ntInt ntInt)
	(func35 ntString ntString)
	(func42 ntString ntInt)
	(func44 ntString ntInt ntString)
	(func45 ntString ntInt ntString)
	(func47 ntString ntInt ntString ntString)
	(func48 ntString ntInt ntString ntString)
	(func50 ntString ntInt ntString)
	(str.++ ntString ntString)
	(str.replace ntString ntString ntString)
))
 (ntInt Int (
	0 1 2 
	(func7 ntInt)
	(func8 ntString ntString ntInt)
	(func16 ntInt ntString)
	(func17 ntString)
	(func18 ntInt)
	(func54 ntString ntString)
	(str.len ntString)
	(str.to.int ntString)
	(ite ntBool ntInt ntInt)
	(str.indexof ntString ntString ntInt)
))
 (ntBool Bool (
	true false
	(str.contains ntString ntString)
))
))
(constraint (= (f "University of Pennsylvania" "Phialdelphia, PA, USA") "Phialdelphia, PA, USA"))
(constraint (= (f "UCLA" "Los Angeles, CA") "Los Angeles, CA, USA"))
(constraint (= (f "Cornell University" "Ithaca, New York, USA") "Ithaca, NY, USA"))
(constraint (= (f "Penn" "Philadelphia, PA, USA") "Philadelphia, PA, USA"))
(constraint (= (f "University of Maryland College Park" "College Park, MD") "College Park, MD, USA"))
(constraint (= (f "University of Michigan" "Ann Arbor, MI, USA") "Ann Arbor, MI, USA"))
(constraint (= (f "Columbia University" "New York, NY, USA") "New York, NY, USA"))
(constraint (= (f "NYU" "New York, New York, USA") "New York, NY, USA"))
(check-synth)
